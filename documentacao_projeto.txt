
ðŸ“„ DocumentaÃ§Ã£o do Projeto â€” CatÃ¡logo de Produtos com Redis e Flask

1. VisÃ£o Geral
Este projeto implementa um catÃ¡logo de produtos utilizando:
- Redis (banco NoSQL do tipo chave-valor) para armazenar os dados.
- Flask (framework Python) para fornecer uma API e servir a interface web.
- HTML + CSS + JavaScript para criar uma interface simples, moderna e funcional.
- Docker para rodar o Redis sem instalaÃ§Ã£o manual no sistema.

O sistema permite:
- Listar todos os produtos.
- Filtrar produtos por categoria.
- Visualizar informaÃ§Ãµes detalhadas (nome, preÃ§o, estoque, categoria).

2. Estrutura de Pastas
meu_projeto_redis/
â”‚
â”œâ”€â”€ docker-compose.yml        # ConfiguraÃ§Ã£o do Redis no Docker
â”œâ”€â”€ requirements.txt          # Lista de bibliotecas Python necessÃ¡rias
â”œâ”€â”€ app.py                     # Backend Flask + conexÃ£o com Redis
â””â”€â”€ templates/
    â””â”€â”€ index.html             # Interface web do catÃ¡logo

3. Tecnologias Utilizadas
- Redis: Banco de dados NoSQL de chave-valor.
- Docker Compose: OrquestraÃ§Ã£o para subir o Redis rapidamente.
- Flask: Framework web em Python.
- HTML5 + CSS3 + JavaScript: CriaÃ§Ã£o da interface e interatividade.
- Python 3.x: Linguagem principal do backend.

4. ConfiguraÃ§Ã£o do Ambiente
PrÃ©-requisitos:
- Python 3.x
- Docker Desktop
- VS Code

Passo 1 â€” Criar a pasta do projeto:
mkdir meu_projeto_redis
cd meu_projeto_redis

Passo 2 â€” Criar o arquivo docker-compose.yml:
services:
  redis:
    image: redis:latest
    container_name: redis_server
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
volumes:
  redis_data:

Passo 3 â€” Subir o Redis com Docker:
docker-compose up -d

Passo 4 â€” Criar e ativar ambiente virtual Python:
python -m venv venv
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
.env\Scripts\Activate.ps1

Passo 5 â€” Instalar dependÃªncias:
Arquivo requirements.txt:
flask
redis
Instalar:
pip install -r requirements.txt**

5. Backend (app.py)
O app.py:
- Conecta ao Redis.
- Inicializa dados de exemplo se ainda nÃ£o existirem.
- Cria duas rotas:
  - / â†’ Retorna a pÃ¡gina HTML.
  - /buscar â†’ Retorna os produtos (todos ou filtrados por categoria) em JSON.

6. Frontend (templates/index.html)
- Interface minimalista com tons amarelo e branco.
- Campo de busca para filtrar por categoria.
- RequisiÃ§Ãµes AJAX para /buscar.
- ExibiÃ§Ã£o dos produtos em "cards".

7. Executando o Projeto
1. Iniciar Redis:
docker-compose up -d
2. Ativar ambiente Python:
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
.env\Scripts\Activate.ps1
3. Rodar backend Flask:
python app.py
4. Abrir navegador:
http://localhost:5000

8. UtilizaÃ§Ã£o
- Campo vazio + Buscar â†’ Lista todos os produtos.
- Digite "AcessÃ³rios" â†’ Filtra apenas produtos dessa categoria.
- Digite "InformÃ¡tica" â†’ Mostra apenas produtos dessa categoria.

9. Estrutura do Banco no Redis
- produto:<id> â†’ Hash com dados do produto.
- produtos â†’ Lista com IDs de todos os produtos.
- categoria:<nome> â†’ Conjunto com IDs dos produtos dessa categoria.

10. Encerrando os serviÃ§os
- Parar Flask â†’ CTRL + C
- Parar Redis â†’ docker-compose down
